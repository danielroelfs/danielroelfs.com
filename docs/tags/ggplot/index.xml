<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot on Daniel Roelfs</title>
    <link>/tags/ggplot/</link>
    <description>Recent content in ggplot on Daniel Roelfs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 24 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ggplot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Easier Way to Create a Map of Norway Using {fhimaps}</title>
      <link>/blog/the-easier-way-to-create-a-map-of-norway-using-fhimaps/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/the-easier-way-to-create-a-map-of-norway-using-fhimaps/</guid>
      <description>Every now and then you discover a discover a much simpler solution to a problem you spent a lot of time solving. This recently happened to me on the topic of creating a map of Norway in R. In this post, I want to go through the process of what I learned.
Previously, I used a JSON file and the {geojsonio} package to create a map of Norway and its fylker (counties) in particular.</description>
    </item>
    
    <item>
      <title>Visualizing the State of the Amsterdam Housing Market</title>
      <link>/blog/visualizing-the-state-of-the-amsterdam-housing-market/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/visualizing-the-state-of-the-amsterdam-housing-market/</guid>
      <description>body { background-color: #EBEBEB; /* was #EFEFEF */ } table { font-family: &#34;Nunito Sans&#34;, sans-serif; } code { background: #E0E0E0; } img { max-width: 80%; }  # Setup of the environment library(tidyverse) library(ggtext) library(magrittr) library(showtext) font_add_google(name = &amp;#34;Nunito Sans&amp;#34;, family = &amp;#34;nunito-sans&amp;#34;) showtext_auto() theme_set(ggthemes::theme_economist(base_family = &amp;#34;nunito-sans&amp;#34;) + theme(rect = element_rect(fill = &amp;#34;#EBEBEB&amp;#34;, color = &amp;#34;transparent&amp;#34;), plot.background = element_rect(fill = &amp;#34;#EBEBEB&amp;#34;, color = &amp;#34;transparent&amp;#34;), panel.background = element_rect(fill = &amp;#34;#EBEBEB&amp;#34;, color = &amp;#34;transparent&amp;#34;), plot.</description>
    </item>
    
    <item>
      <title>Plotting Star Destroyers in R</title>
      <link>/blog/plotting-star-destroyers-in-r/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/plotting-star-destroyers-in-r/</guid>
      <description>Introduction Most people in my environment know R as the quintessential tool for statistical analysis and data visualization. There&amp;rsquo;s plenty of tutorials and discussions online about how to go about either. But one important aspect that is noticeably lacking is a discussion about R&amp;rsquo;s ability to simulate scenes from Star Wars. Today, we&amp;rsquo;ll set this straight. At the same time we&amp;rsquo;ll also explore how to incorporate a mathematical formula with a set of simple rules into R.</description>
    </item>
    
    <item>
      <title>How I make QQ Plots Using ggplot</title>
      <link>/blog/how-i-make-qq-plots-using-ggplot/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-i-make-qq-plots-using-ggplot/</guid>
      <description>Introduction Whenever I show my colleagues in the genetics group my results, the first things they say are &amp;ldquo;can you show me the Manhattan plots?&amp;rdquo; and &amp;ldquo;can you show me the QQ plots?&amp;rdquo;. I covered how to make Manhattan plots in ggplot before (click here for a link. But now I want to go through how I make QQ plots. I&amp;rsquo;m aware that there&amp;rsquo;s a number of packages available that offer this funcionality, but I feel they&amp;rsquo;re for the most part a bit limiting compared to making the plot yourself using the {ggplot2} package.</description>
    </item>
    
    <item>
      <title>Analyzing Bach</title>
      <link>/blog/analyzing-bach/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/analyzing-bach/</guid>
      <description>@import url(&#39;https://fonts.googleapis.com/css?family=IM+Fell+English|IM+Fell+English+SC&amp;display=swap&#39;); body{ background-color: #FFFFF0; } h1 { font-family: &#39;IM Fell English&#39;, serif; } h2,h3,h4,h5,h6 { font-family: &#39;IM Fell English&#39;, serif; } .post-title { font-family: &#39;IM Fell English SC&#39;, serif; font-size: 6rem; }  Introduction A little while ago I was watching a documentary series on Dutch television about one of the most important composers in the Netherlands: Johann Sebastian Bach. The documentary discussed parts of Bach&amp;rsquo;s life and the music he wrote during it.</description>
    </item>
    
    <item>
      <title>How I Create Manhattan Plots Using ggplot</title>
      <link>/blog/how-i-create-manhattan-plots-using-ggplot/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-i-create-manhattan-plots-using-ggplot/</guid>
      <description>Introduction There are many ways to create a Manhattan plot. There&amp;rsquo;s a number of online tools that create Manhattan plots for you, it&amp;rsquo;s implemented in a number of toolboxes that are often used in genetics, and there&amp;rsquo;s a couple of packages for R that can create these plots. However, these options often don&amp;rsquo;t offer the customizability that some people (like me) would want. One of the most flexible ways to plot a Manhattan plot (I know of) is the {manhattan} package, but how nice would it be to have full control over the properties of the plot.</description>
    </item>
    
    <item>
      <title>How I Plot ERPs in R</title>
      <link>/blog/how-i-plot-erps-in-r/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-i-plot-erps-in-r/</guid>
      <description>Introduction Plotting ERPs is one of the essential skills in EEG neuroscience. There are many possible ways of going about this task, some better than others. Myself, I use either MATLAB or R to plot ERPs. In my experience, MATLAB is by far the preferred method since most of the EEG analysis takes place in MATLAB already, but I believe that there&amp;rsquo;s some merit to using R. One of my main arguments is aesthetics.</description>
    </item>
    
  </channel>
</rss>
